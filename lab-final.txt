.cseg ; nasledujici umistit do pameti programu (implicitni)
; Zacatek programu - po resetu
.org 0
    jmp start
.include "printlib.inc"
    
; Zacatek programu - hlavni program
.org 0x100

start:
    call init_disp
    
;   init_button:
    push r16
    ; povoleni AD prevodniku (nastaveni bitu ADEN v pameti na adrese ADCSRA bez ovlivneni ostatnich bitu) 1
    lds r16, ADCSRA
    ori r16, (1<<ADEN); 2
    sts ADCSRA, r16
    ; nastaveni referencniho napeti (0b01<<REFS0)
    ; nastaveni zarovnani vystupu vlevo (1<<ADLAR); 3
    ldi r16, (0b01<<REFS0) | (1<<ADLAR); 4
    sts ADMUX, r16
    pop r16
    ;ret
    ldi r16, '0'

read_button:
    lds r16, ADCSRA        ; load ADCSRA address into r16
    ori r16, (1<<ADSC)     ; start ADC conversion by setting ADSC bit
    sts ADCSRA, r16        ; store r16 back to ADCSRA

adcsra_loop:
    lds r16, ADCSRA    ; load ADCSRA into r16
    andi r16, (1<<ADSC) ; mask out all but the ADSC bit
    breq adcsra_done   ; if ADSC bit is clear, conversion is done
    rjmp adcsra_loop   ; otherwise, keep waiting
    
adcsra_done:
    
    call showkek
    call waiting
    
    lds r16, ADCH          ; load ADCH into r16
    andi r16, 0b11110000   ; mask out the bottom 4 bits
   
    cpi r16, 0b10010000 ; compare with Select button value
    breq select_pressed   ; if equal, jump to select_pressed
    cpi r16, 0b01100000  ; compare with Left button value
    breq left_pressed      ; if equal, jump to left_pressed
    cpi r16, 0b00110000  ; compare with Down button value
    breq down_pressed      ; if equal, jump to down_pressed
    cpi r16, 0b00010000    ; compare with Up button value
    breq up_pressed        ; if equal, jump to up_pressed
    cpi r16, 0b00000000 ; compare with Right button value
    breq right_pressed     ; if equal, jump to right_pressed
    rjmp no_button_pressed ; otherwise, no button is pressed

waiting: 
    ldi r19, 100 ; wait code (100 * 80)
    cek2: ldi r18, 60
    cek: dec r18
    brne cek
    dec r20
    brne cek2
    ret

showkek:

    call waiting
    ;ldi r16, '1'
    ldi r17, 1
    call show_char
    ret

select_pressed:
    ; do something when Select button is pressed
    ldi r16, 'S'
    call showkek
    rjmp read_button

left_pressed:
    ; do something when Left button is pressed
    ldi r16, 'L'
    call showkek
    rjmp read_button

down_pressed:
    ; do something when Down button is pressed
    ldi r16, 'D'
    call showkek
    rjmp read_button

up_pressed:
    ; do something when Up button is pressed
    ldi r16, 'U'
    call showkek
    rjmp read_button

right_pressed:
    ; do something when Right button is pressed
    ldi r16, 'R'
    call showkek
    rjmp read_button

no_button_pressed:
    ; do something when no button is pressed
    ldi r16, '-'
    call showkek
    rjmp read_button

    
end: jmp end
