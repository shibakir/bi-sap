.cseg ; nasledujici umistit do pameti programu (implicitni)
; Zacatek programu - po resetu
.org 0
    jmp start
.include "printlib.inc"

.org 0x100
delka: .db 6 ; definice read-only konstanty v pameti programu (jeden bajt s hodnotou 6) 1
retez: .db "KIRILL SHIBANOV NECHCE ZKOUSKU",0 ; retezec zakonceny nulou (nikoli znakem "0") 1

waiting: 
    ldi r21, 33 ; wait code ( 255 * 255 )
    cek2: ldi r20, 120
    cek: dec r20
    brne cek
    dec r21
    brne cek2
    ret

check_overflow:
    mov r23, r17
    cpi r23 , 64
    brsh continue_print // if wer still on bottom line
    
    mov r23, r17  // rotate value 
    andi r17, 0x0F
    cpi r17, 0x04
    brne continue
    
    jmp after_check
    
reset_text:
    ldi r30, low(2*retez)
    ldi r31, high(2*retez)
    ret
; main program
start:
    call init_disp
    call reset_text
    
    ldi r22, 79
    mov r17, r22

cycle:
    lpm r16, Z+
    jmp check_overflow
    after_check:
    
    cpi r16, 0
    brne continue_print // else make soft reset
    ;-------------------------------- soft reset
    dec r22
    mov r17, r22 // set new internal shift 
    call waiting
    call reset_text
    
    jmp cycle
    ;--------------------------------
continue:
    call show_char
    mov r17, r23
    jmp continue_print2
    
continue_print:
    call show_char
    
continue_print2:
    
    inc r17
    
    cpi r17, 0
    brne cycle
    
    cpi r16, 0 // check if we have end of text, then dec external shift 
    brne cycle
    ;-------------------------------- hard reset
    call reset_text
    ldi r22, 79
    mov r17, r22
    jmp cycle
    ;--------------------------------
    
end: jmp end
